import streamlit as st
## Basic config stuff
#Use full screen
st.set_page_config(layout="wide", page_title="ProPan")
#Hide image expand button (it gets rid of all of the page's stored data when someone clicks it)
hide_img_fs = '''
<style>
button[title="View fullscreen"]{
    visibility: hidden;}
</style>
'''

st.markdown(hide_img_fs, unsafe_allow_html=True)

##Actual code
import random
import json
from image_getter import get_image, text_to_image

st.title('Prospector\'s Panorama')

#Let's do all the prompt stuff inside a single form so that we only run images when we want to

big_form = st.form(key="search_form")

big_form.form_submit_button("Generate", help="Generate images according to search settings")

#separate all sections (search config, image config, images) into tabs

tab_group = big_form.tabs(["Prompt", "Image Layout", "Images"])
#Search Section
search_container = tab_group[0].container()

base_prompt = search_container.text_input('Prompt')
net_prompt = "'"+base_prompt

with search_container:
    configured_mods = []
    with open("config.json", 'r') as config_file:
        config_dict = json.load(config_file)
        configured_mods = config_dict["modifiers"]
    common_mods = st.multiselect('Common Modifiers', configured_mods)
    if len(common_mods) > 0:
        net_prompt += ", {}".format(", ".join(common_mods))
    net_prompt += "'"
    
    steps = st.number_input("Steps", min_value=1, value=50, max_value=50, help="Fewer is fast, more is usually more detailed")
    # net_prompt += " --steps {}".format(steps)
    
    cfg_scale = st.number_input("Scale", min_value=-7.0, max_value=30.0, help="How closely the AI tries to follow the prompt", value=7.0)
    #v net_prompt += " --cfg_scale {:.3f}".format(cfg_scale)

    image_width = int(st.number_input("Width", help="Will be rounded down to a multiple of 32", value=512, min_value=32, key="image_width"))
    image_width = image_width - (image_width % 32)
    # net_prompt += " --width {}".format(st.session_state.image_width)

    image_height = int(st.number_input("Height", help="Will be rounded down to a multiple of 32", value=512, min_value=32, key="image_height"))
    image_height = image_height - (image_height % 32)
    # net_prompt += " --height {}".format(image_height) + " -n 1"

    st.write('Current prompt: '+ net_prompt)




#Image display section
MAX_IMAGES = 9
LOADING_IMAGE = "Loading.png"
#seeds are always stored on a MAX_IMAGES basis in case someone accidentally lowers the amount of images and then increases it again
def gen_seed():
    return random.randint(0, 2**50-1)
seed_locks = [False] * MAX_IMAGES
seeds = [0] * MAX_IMAGES
image_containers = [None] * 9
image_container = tab_group[1].container()
with image_container:
    num_images = int(st.selectbox("Number of images", [i for i in range(1, MAX_IMAGES+1)], index=3))
    num_columns = int(st.selectbox("Number of columns", [1,2,3], index=1))
    
image_cols = tab_group[2].columns(num_columns)
if base_prompt.strip() != '':
    for i in range(num_images):
        with image_cols[i % num_columns]:
            seed_key = "seed{}".format(i)
            lock_key = "lock_seed{}".format(i)

            prev_lock_val = st.session_state[lock_key] if lock_key in st.session_state else False
            seeds[i] = st.session_state[seed_key] if (seed_key in st.session_state and prev_lock_val) else gen_seed()
            
            image_containers[i] = st.empty()
            #image_containers[i].write("Calling get_image({}, {})".format(net_prompt, seeds[i]))
            image_containers[i].image(LOADING_IMAGE)
            seed_locks[i] = st.checkbox("Choose seed", key=lock_key)
            seeds[i] = st.number_input("Current seed", value=seeds[i], key=seed_key, disabled=not seed_locks[i])
    for i in range(num_images):
        with image_cols[i % num_columns]:
            image_containers[i].image(text_to_image(net_prompt, steps, image_height, image_width, cfg_scale, seeds[i]), width=None)

about_section = st.container()
about_section.expander("About").markdown("""
Prospector's Panorama (ProPan) is a tool for sifting through images generated by Stable Diffusion. The name is inspired by the practice of "panning", a method for finding gold by washing away lighter materials from a pile of dirt. Panning isn't the best method for extracting gold from its surroundings, but it's popular among hobbyists because it only requires a simple tool and a little manual effort. I hope that ProPan will serve a similar niche in the AI art ecosystem: It's not the fanciest tool around, but it gets the job done.

It is called prospector's *panorama* because the tool is made to display a set of images. To use ProPan, start by entering a prompt. Click the "Generate" button to generate images, navigate to the "Images" tab to view them. Every image is associated with a *seed*. This seed can be automatically generated (the default), or manually selected. The most common way to find a good seed is to run with random generation and then "lock in" a seed that suits your purposes. Stable diffusion has fairly stable output- images with similar prompts and the same seed will be similar.

To save an image, right click it and select "Save image as...", or whatever equivalent prompt your browser offers.""")
